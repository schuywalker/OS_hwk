Schuyler Asplin
CSCD 340
Chapter 12 Virtual Memory Intro

1. The first Linux tool you should check out is the very simple tool
free. First, type man free and read its entire manual page; it’s
short, don’t worry!

free isn't a command on mac - that information is available in activity monitor but not from command line. Switching to linux...

2. Now, run free, perhaps using some of the arguments that might
be useful (e.g., -m, to display memory totals in megabytes). How
much memory is in your system? How much is free? Do these
numbers match your intuition?

On my linux computer :
7403 mb total (7 gb)
189 mb free (.2 gb)
3783 mb used (3.7 gb)
I know - this thing is a piece of a real clunker :)


3. Next, create a little program that uses a certain amount of memory,
called memory-user.c. This program should take one commandline argument: the number of megabytes of memory it will use.
When run, it should allocate an array, and constantly stream through
the array, touching each entry. The program should do this indefinitely, or, perhaps, for a certain amount of time also specified at the
command line.

	memory-user.c works with one or two command line arguments. 
The first is how many times each letter of the alphabet will be printed per line (how many bytes are malloc'd), 
and the second is how many letters (rows) will be printed. 
Each malloc'd byte is touched on each iteration of the loop. 
If no second argument is provided, it runs until the user kills the program.
	

4. Now, while running your memory-user program, also 
(in a different terminal window, but on the same machine) run the free
tool. How do the memory usage totals change when your program
is running? How about when you kill the memory-user program?
Do the numbers match your expectations? Try this for different
amounts of memory usage. What happens when you use really
large amounts of memory?

BEFORE:
	               total        used        free      shared  buff/cache   available
Mem:            7403        3762         232          70        3407        3284
Swap:           7402          24        7378

DURING RUN:
               total        used        free      shared  buff/cache   available
Mem:            7403        3782         212          70        3408        3265
Swap:           7402          24        7378

1 MINUTE AFTER:
               total        used        free      shared  buff/cache   available
Mem:            7403        3748         232          74        3422        3295
Swap:           7402          24        7378

So there is a small amount of memory that has moved from free to used during the programm and then back again.
I had to wait a bit after the run to see the numbers change - even 10 seconds after the free number was still depressed.


5. Let’s try one more tool, known as pmap. Spend some time, and read
the pmap manual page in detail.



6. To use pmap, you have to know the process ID of the process you’re
interested in. Thus, first run ps auxw to see a list of all processes;
then, pick an interesting one, such as a browser. You can also use
your memory-user program in this case (indeed, you can even
have that program call getpid() and print out its PID for your
convenience).

	PID of firefox is 33207 (there are a ton of them but I think this is the )	

7. Now run pmap on some of these processes, using various flags (like
-X) to reveal many details about the process. What do you see?
How many different entities make up a modern address space, as
opposed to our simple conception of code/stack/heap?

	so many addresses! stack has 128 kb. some of anon is probably heap?
	- firefox loads libpcsclite 
	(sent me down a rabbit hole about smart cards.. pretty confused, but seems like it's an identification device embedded onto a chip), 
	libcrypto (encryption),
	libtasn1 (package - impossible to tell what this does.. DER/BER data following an ASN..?)
	p11-kit-trust.so - interfaces with cryptographic token modules
	libp11-kit1.so - seems like it does the the same thing. load and enumerate PKCS11 modules
	libfreeblpriv3 - something with apache
	memfd:mozilla-ipc (deleted)
	way to many other libs for me to go through all of them. 
	Some that I recognized on a cursory level include libsqlite, libfontconfig, libmozsqlite3, libc and libgcc,
	libstdc++, ld-linux-x86-64.so.

	-x shows resident set size and how many pages are dirty for in each memory address segment.
	-d adds device and offset
	-p is actually really cool. most things are from the lib64/firefox directory OR from their own directory in lib64.
	

8. Finally, let’s run pmap on your memory-user program, with different amounts of used memory. What do you see here? Does the
output from pmap match your expectations?

	2600 kb total. I'm surprised that heap is about the same as stack when it's running in an inifite loop,
	but I guess it makes sense considering the loop isnt really allocating any memory space. The program code
	takes up 5 pages, one of which is executable and one of which is writable. I don't understand why there's 
	a writable file in the program code section. The buld of the memory the program used is libc and linux.


	output: 
	
0000000000400000      4K r---- memory-user
0000000000401000      4K r-x-- memory-user
0000000000402000      4K r---- memory-user
0000000000403000      4K r---- memory-user
0000000000404000      4K rw--- memory-user
000000000181b000    132K rw---   [ anon ]
00007f683bc5b000    160K r---- libc.so.6
00007f683bc83000   1488K r-x-- libc.so.6
00007f683bdf7000    352K r---- libc.so.6
00007f683be4f000     16K r---- libc.so.6
00007f683be53000      8K rw--- libc.so.6
00007f683be55000     52K rw---   [ anon ]
00007f683be7b000      8K r---- ld-linux-x86-64.so.2
00007f683be7d000    152K r-x-- ld-linux-x86-64.so.2
00007f683bea3000     44K r---- ld-linux-x86-64.so.2
00007f683beaf000      8K r---- ld-linux-x86-64.so.2
00007f683beb1000      8K rw--- ld-linux-x86-64.so.2
00007f683beb3000     16K rw---   [ anon ]
00007ffc0a524000    136K rw---   [ stack ]
00007ffc0a5f3000     16K r----   [ anon ]
00007ffc0a5f7000      8K r-x--   [ anon ]
ffffffffff600000      4K --x--   [ anon ]
 total             2628K